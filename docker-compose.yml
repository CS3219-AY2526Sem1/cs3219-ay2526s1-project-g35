services:
  # Frontend service
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.docker
    depends_on:
      user-service:
        condition: service_healthy
      question-service:
        condition: service_healthy
    networks:
      - peerprep-network
    restart: unless-stopped

  # User service - Authentication and user management API
  user-service:
    build: ./backend/user-service
    ports:
      - "8000:8000"
    env_file:
      - ./backend/user-service/.env.docker
    environment:
      - REDIS_URL=redis://user-service-redis:6379
    depends_on:
      user-service-redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Question service - Question management API
  question-service:
    build: ./backend/question-service
    ports:
      - "8001:8001"
    env_file:
      - ./backend/question-service/.env.docker
    environment:
      - REDIS_HOST=question-service-redis
      - REDIS_PORT=6380
    depends_on:
      question-service-redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Matching Service
  matching-service:
    container_name: matching-service
    build: ./backend/matching-service
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - COLLABORATION_SERVICE_URL=http://collaboration-service:8002
      - QUESTION_SERVICE_URL=http://question-service:8001
      - NODE_ENV=production
      - MATCHING_TIMEOUT_MS=60000
      - REDIS_URL=redis://matching-service-redis:6381
    depends_on:
      collaboration-service:
        condition: service_healthy
      question-service:
        condition: service_healthy
      matching-service-redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8003/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Collaboration service - Real-time collaboration and WebSocket
  collaboration-service:
    build: ./backend/collaboration-service
    ports:
      - "8002:8002"
    env_file:
      - ./backend/collaboration-service/.env.docker
    environment:
      - REDIS_URL=redis://collaboration-service-redis:6382
    depends_on:
      collaboration-service-redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Redis instances for each service - separated for scalability
  user-service-redis:
    container_name: user-service-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --port 6379 --appendonly yes
    volumes:
      - user_redis_data:/data
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  question-service-redis:
    container_name: question-service-redis
    image: redis:7-alpine
    ports:
      - "6380:6380"
    command: redis-server --port 6380 --appendonly yes
    volumes:
      - question_redis_data:/data
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6380", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  matching-service-redis:
    container_name: matching-service-redis
    image: redis:7-alpine
    ports:
      - "6381:6381"
    command: redis-server --port 6381 --appendonly yes
    volumes:
      - matching_redis_data:/data
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6381", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  collaboration-service-redis:
    container_name: collaboration-service-redis
    image: redis:7-alpine
    ports:
      - "6382:6382"
    command: redis-server --port 6382 --appendonly yes
    volumes:
      - collaboration_redis_data:/data
    networks:
      - peerprep-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6382", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

networks:
  peerprep-network:
    driver: bridge

volumes:
  user_redis_data:
  question_redis_data:
  matching_redis_data:
  collaboration_redis_data:
