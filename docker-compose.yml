services:
  # Frontend service
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env.docker
    depends_on:
      user-service:
        condition: service_healthy
      question-service:
        condition: service_healthy
    networks:
      - peerprep-network
    restart: unless-stopped

  # User service - Authentication and user management API
  user-service:
    build: ./backend/user-service
    ports:
      - "8000:8000"
    env_file:
      - ./backend/user-service/.env.docker
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Question service - Question management API
  question-service:
    build: ./backend/question-service
    ports:
      - "8001:8001" 
    env_file:
      - ./backend/question-service/.env.docker
    networks:
      - peerprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Collaboration service - Real-time collaboration and WebSocket
  collaboration-service:
    build: ./backend/collaboration-service
    ports:
      - "8002:8002"
    env_file:
      - ./backend/collaboration-service/.env.docker
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - peerprep-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Redis - Session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - peerprep-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped

networks:
  peerprep-network:
    driver: bridge

volumes:
  redis_data:
