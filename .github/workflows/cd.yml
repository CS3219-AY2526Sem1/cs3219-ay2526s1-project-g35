name: CD Pipeline

on:
  push:
    branches: [master, main]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    concurrency:
      group: build-and-push
      cancel-in-progress: false
    
    strategy:
      matrix:
        service:
          - name: user-service
            path: backend/user-service
            dockerfile: backend/user-service/Dockerfile
            context: backend/user-service
            port: 8000
          - name: question-service
            path: backend/question-service
            dockerfile: backend/question-service/Dockerfile
            context: backend/question-service
            port: 8001
          - name: collaboration-service
            path: backend/collaboration-service
            dockerfile: backend/collaboration-service/Dockerfile
            context: backend/collaboration-service
            port: 8002
          - name: matching-service
            path: backend/matching-service
            dockerfile: backend/matching-service/Dockerfile
            context: backend/matching-service
            port: 8003
          - name: frontend
            path: frontend
            dockerfile: frontend/Dockerfile
            context: frontend
            port: 3000
    
    outputs:
      image-tags: ${{ toJson(steps.meta.outputs.tags) }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set image prefix to lowercase
        id: image-prefix
        run: |
          IMAGE_PREFIX=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image-prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image-prefix.outputs.image-prefix }}/peerprep-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            BUILD_VERSION=${{ github.sha }}
            BUILD_BRANCH=${{ github.ref_name }}
      
      - name: Output image info
        run: |
          echo "Pushed image: ${{ steps.meta.outputs.tags }}"
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  # Security scanning (optional but recommended)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [user-service, question-service, collaboration-service, matching-service, frontend]
    
    steps:
      - name: Set image prefix to lowercase
        id: image-prefix
        run: |
          IMAGE_PREFIX=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image-prefix=$IMAGE_PREFIX" >> $GITHUB_OUTPUT
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.image-prefix.outputs.image-prefix }}/peerprep-${{ matrix.service }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging environment (if on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.peerprep.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "This would typically involve:"
          echo "1. Update Kubernetes manifests with new image tags"
          echo "2. Apply manifests to staging cluster"
          echo "3. Wait for rollout to complete"
          echo "4. Run smoke tests"
          echo "5. Notify team"
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging environment..."
          # Add your smoke test commands here

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: |
      github.ref == 'refs/heads/master' ||
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://peerprep.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "This would typically involve:"
          echo "1. Update Kubernetes manifests with new image tags"
          echo "2. Apply manifests to production cluster"
          echo "3. Wait for rollout to complete"
          echo "4. Monitor deployment health"
          echo "5. Rollback if issues detected"
          echo "6. Send deployment notifications"
      
      - name: Run health checks
        run: |
          echo "Running health checks on production services..."
          # Add your health check commands here
      
      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deployment to production',
              required_contexts: []
            })

  # Optional: Rollback job
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production]
    environment:
      name: production
    
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version..."
          # Add your rollback commands here
          # For Kubernetes: kubectl rollout undo deployment/<service-name>

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Delete old images
        run: |
          echo "Cleaning up old container images..."
          echo "This would typically delete images older than N days"
          echo "Images to keep: latest, main/master branch tags, and last 10 tags"

  # Summary
  cd-success:
    name: CD Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, deploy-production]
    if: always()
    
    steps:
      - name: Deployment summary
        run: |
          echo "CD Pipeline Summary"
          echo "==================="
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Status: Success"

